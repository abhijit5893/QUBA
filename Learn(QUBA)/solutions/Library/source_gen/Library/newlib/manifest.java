package Library.newlib;

/*Generated by MPS */

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import javax.xml.transform.dom.DOMSource;
import java.io.File;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.Transformer;
import org.w3c.dom.Element;
import javax.swing.JOptionPane;
import org.w3c.dom.NodeList;

public class manifest {
  /*package*/ DocumentBuilderFactory documentBuilderFactory;
  /*package*/ DocumentBuilder documentBuilder;
  /*package*/ Document document;
  /*package*/ DOMSource source;
  /*package*/ File fp;
  /*package*/ StreamResult result;
  /*package*/ TransformerFactory transformerFactory;
  /*package*/ Transformer transformer;

  public manifest() {
    try {
      createManifest();
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }

  public void createManifest() throws Exception {
    File directory = new File("C:\\Users\\" + System.getProperty("user.name") + "\\Documents\\QUBA");
    if (!(directory.exists())) {
      directory.mkdir();
    }
    fp = new File("C:\\Users\\" + System.getProperty("user.name") + "\\Documents\\QUBA\\QUBAManifest.xml");
    if (fp.createNewFile()) {
      result = new StreamResult(fp);
      documentBuilderFactory = DocumentBuilderFactory.newInstance();
      documentBuilder = documentBuilderFactory.newDocumentBuilder();
      document = documentBuilder.newDocument();
      Element rootElement = document.createElement("root");
      document.appendChild(rootElement);
      Element base = document.createElement("BASE");
      base.appendChild(document.createTextNode("C:\\Users\\" + System.getProperty("user.name") + "\\Documents\\QUBA"));
      rootElement.appendChild(base);
      Element qpmanifest = document.createElement("QPMANIFEST");
      qpmanifest.appendChild(document.createTextNode("C:\\Users\\" + System.getProperty("user.name") + "\\Documents\\QUBA\\QPManifest.xml"));
      rootElement.appendChild(qpmanifest);
      Element qbpath = document.createElement("QBPATH");
      qbpath.appendChild(document.createTextNode("C:\\Users\\" + System.getProperty("user.name") + "\\Documents\\QUBA\\QueBank.xml"));
      rootElement.appendChild(qbpath);
      Element qpaper = document.createElement("QPAPER");
      qpaper.appendChild(document.createTextNode("C:\\Users\\" + System.getProperty("user.name") + "\\Documents\\QUBA\\QPAPER"));
      rootElement.appendChild(qpaper);
      Element key = document.createElement("KEY");
      key.appendChild(document.createTextNode("C:\\Users\\" + System.getProperty("user.name") + "\\Documents\\QUBA\\KEY"));
      rootElement.appendChild(key);
      Element report = document.createElement("REPORT");
      report.appendChild(document.createTextNode("C:\\Users\\" + System.getProperty("user.name") + "\\Documents\\QUBA\\REPORT"));
      rootElement.appendChild(report);
      result = new StreamResult(fp);
      source = new DOMSource(document);
      transformerFactory = TransformerFactory.newInstance();
      transformer = transformerFactory.newTransformer();
      transformer.transform(source, result);
      JOptionPane.showMessageDialog(null, "XML File created");
    }
  }

  public boolean manifestExists() {
    return fp.exists();
  }

  public static String getQBPath() {
    try {
      manifest q = new manifest();
      if (!((q.manifestExists()))) {
        q.createManifest();
      }
      DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
      DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
      Document doc = docBuilder.parse(q.fp);
      NodeList nList = doc.getElementsByTagName("QBPATH");
      String temp = nList.item(0).getTextContent();
      temp = temp.replaceAll("%USERNAME%", System.getProperty("user.name").toString());
      return temp;
    } catch (Exception e) {
      e.printStackTrace();
      return null;
    }
  }

  public static String getQPaper() {
    try {
      manifest q = new manifest();
      if (!((q.manifestExists()))) {
        q.createManifest();
      }
      DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
      DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
      Document doc = docBuilder.parse(q.fp);
      NodeList nList = doc.getElementsByTagName("QPAPER");
      String temp = nList.item(0).getTextContent();
      temp = temp.replaceAll("%USERNAME%", System.getProperty("user.name").toString());
      return temp;
    } catch (Exception e) {
      e.printStackTrace();
      return null;
    }
  }

  public static String getKey() {
    try {
      manifest q = new manifest();
      if (!((q.manifestExists()))) {
        q.createManifest();
      }
      DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
      DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
      Document doc = docBuilder.parse(q.fp);
      NodeList nList = doc.getElementsByTagName("KEY");
      String temp = nList.item(0).getTextContent();
      temp = temp.replaceAll("%USERNAME%", System.getProperty("user.name").toString());
      return temp;
    } catch (Exception e) {
      e.printStackTrace();
      return null;
    }
  }

  public static String getReport() {
    try {
      manifest q = new manifest();
      if (!((q.manifestExists()))) {
        q.createManifest();
      }
      DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
      DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
      Document doc = docBuilder.parse(q.fp);
      NodeList nList = doc.getElementsByTagName("REPORT");
      String temp = nList.item(0).getTextContent();
      temp = temp.replaceAll("%USERNAME%", System.getProperty("user.name").toString());
      return temp;
    } catch (Exception e) {
      e.printStackTrace();
      return null;
    }
  }

  public static String getQPManifest() {
    try {
      manifest q = new manifest();
      if (!((q.manifestExists()))) {
        q.createManifest();
      }
      DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
      DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
      Document doc = docBuilder.parse(q.fp);
      NodeList nList = doc.getElementsByTagName("QPMANIFEST");
      String temp = nList.item(0).getTextContent();
      temp = temp.replaceAll("%USERNAME%", System.getProperty("user.name").toString());
      return temp;
    } catch (Exception e) {
      e.printStackTrace();
      return null;
    }
  }


}
