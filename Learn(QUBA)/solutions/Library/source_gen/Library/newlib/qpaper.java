package Library.newlib;

/*Generated by MPS */

import com.itextpdf.text.Font;
import com.itextpdf.text.BaseColor;
import java.util.ArrayList;
import com.itextpdf.text.pdf.PdfPageEventHelper;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.Document;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.Element;
import java.io.FileOutputStream;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Image;
import java.net.URL;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPCell;

public class qpaper {
  private String FILEQ = manifest.getQPaper();
  private String FILEK = manifest.getKey();
  private static String FILER = manifest.getReport();

  private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
  private static Font smallFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.BLACK);
  private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
  private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
  public ArrayList<String> sname;
  public ArrayList<ArrayList<String>> questionCol;
  public ArrayList<ArrayList<String>> keyCol;
  public ArrayList<ArrayList<String>> imageCol;

  public ArrayList<ArrayList<Integer>> marksCol;
  public int pmarks;
  public int nmarks;
  /*package*/ String title;
  /*package*/ String subject;
  /*package*/ String keywords;
  /*package*/ String author;
  /*package*/ String creator;
  /*package*/ String instructions;
  /*package*/ String paperType;
  /*package*/ String time;
  /*package*/ String maxmarks;
  /*package*/ QuestionPaper queP;

  /*package*/ class HeaderFooter extends PdfPageEventHelper {
    /*package*/ Phrase[] header = new Phrase[2];
    /*package*/ String headerTitle;
    /*package*/ int pagenumber;

    private HeaderFooter(String Code) {
      headerTitle = Code;
    }

    public void onOpenDocument(PdfWriter writer, Document document) {
      header[0] = new Phrase(headerTitle);
    }



    public void onChapter(PdfWriter writer, Document document, float paragraphPosition, Paragraph title) {
      header[1] = new Phrase(headerTitle);
      pagenumber = 1;
    }

    public void onStartPage(PdfWriter writer, Document document) {
      pagenumber++;
    }

    public void onEndPage(PdfWriter writer, Document document) {
      Rectangle rect = writer.getBoxSize("art");
      switch (writer.getPageNumber() % 2) {
        case 0:
          ColumnText.showTextAligned(writer.getDirectContent(), Element.ALIGN_RIGHT, header[0], rect.getRight(), rect.getTop(), 0);
          break;
        case 1:
          ColumnText.showTextAligned(writer.getDirectContent(), Element.ALIGN_LEFT, header[1], rect.getLeft(), rect.getTop(), 0);
          break;
        default:
      }
      ColumnText.showTextAligned(writer.getDirectContent(), Element.ALIGN_CENTER, new Phrase(String.format("%d", pagenumber)), (rect.getLeft() + rect.getRight()) / 2, rect.getBottom() - 18, 0);
    }
  }

  public qpaper() {
    this.title = "";
    this.subject = "";
    this.keywords = "";
    this.author = "";
    this.creator = "";
    this.paperType = "";
    this.instructions = "";
    this.time = "";
    sname = new ArrayList<String>();
    questionCol = new ArrayList<ArrayList<String>>();
    keyCol = new ArrayList<ArrayList<String>>();
    marksCol = new ArrayList<ArrayList<Integer>>();
    imageCol = new ArrayList<ArrayList<String>>();
    this.maxmarks = "";
    queP = new QuestionPaper("");
  }

  public qpaper(String title, String subject, String keywords, String author, String creator, String paperType, String code, String time, String marks, String instructions) {

    this.title = title;
    this.subject = subject;
    this.keywords = keywords;
    this.author = author;
    this.creator = creator;
    this.paperType = paperType;
    this.instructions = instructions;
    this.time = time;
    this.maxmarks = marks;
    sname = new ArrayList<String>();
    questionCol = new ArrayList<ArrayList<String>>();
    imageCol = new ArrayList<ArrayList<String>>();
    keyCol = new ArrayList<ArrayList<String>>();
    marksCol = new ArrayList<ArrayList<Integer>>();
    queP = new QuestionPaper(code);
    FILEQ = FILEQ + "_" + code + ".pdf";
    FILEK = FILEK + "_" + code + ".pdf";

  }

  public void setmarks(int p, int n) {
    this.pmarks = p;
    this.nmarks = n;
  }

  /*package*/ void keyPaper(ArrayList<String> sname, ArrayList<ArrayList<String>> questionCol, ArrayList<ArrayList<Integer>> marksCol) {
    try {
      Document document = new Document();
      this.marksCol = marksCol;
      this.sname = sname;
      this.questionCol = questionCol;
      PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(FILEK));
      writer.setStrictImageSequence(true);
      qpaper.HeaderFooter event = new qpaper.HeaderFooter(this.queP.code);
      writer.setBoxSize("art", new Rectangle(36, 54, 559, 788));
      writer.setPageEvent(event);
      document.setPageSize(PageSize.A4);
      document.setMargins(36, 36, 36, 72);
      document.setMarginMirroringTopBottom(true);
      document.open();
      addMetaData(document);
      addKeyPage(document);
      document.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  /*package*/ void questionPaper(ArrayList<String> sname, ArrayList<ArrayList<String>> questionCol, ArrayList<ArrayList<Integer>> marksCol, ArrayList<ArrayList<String>> imageCol) {
    try {
      Document document = new Document();
      this.marksCol = marksCol;
      this.sname = sname;
      this.questionCol = questionCol;
      this.imageCol = imageCol;
      PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(FILEQ));
      writer.setStrictImageSequence(true);

      qpaper.HeaderFooter event = new qpaper.HeaderFooter(this.queP.code);
      writer.setBoxSize("art", new Rectangle(36, 54, 559, 788));
      writer.setPageEvent(event);
      document.setPageSize(PageSize.A4);
      document.setMargins(36, 36, 36, 72);
      document.setMarginMirroringTopBottom(true);

      document.open();
      this.addMetaData(document);
      this.addTitlePage(document);
      document.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  private void addMetaData(Document document) {
    document.addTitle(this.title);
    document.addSubject(this.subject);
    document.addKeywords(this.keywords);
    document.addAuthor(this.author);
    document.addCreator(this.creator);
  }

  private void addTitlePage(Document document) throws DocumentException {
    Paragraph preface = new Paragraph();
    addEmptyLine(preface, 1);
    // We add one empty line 
    Paragraph header = new Paragraph(this.creator + "\n" + this.paperType + "\n" + queP.code + ":" + this.title, smallBold);
    header.setAlignment(Element.ALIGN_CENTER);
    preface.add(header);
    // Lets write a big header 
    addEmptyLine(preface, 1);
    Paragraph leftheader = new Paragraph("Time:" + this.time + "                                                                                                          " + "Maximum Marks:" + this.maxmarks, smallBold);
    leftheader.setAlignment(Element.ALIGN_LEFT);
    preface.add(leftheader);
    addEmptyLine(preface, 3);
    Paragraph instruct = new Paragraph("Instructions\n", smallFont);
    if (this.instructions.startsWith("file") || this.instructions.startsWith("http")) {
      try {
        Image image = Image.getInstance(new URL(this.instructions));
        image.scaleToFit(200, 400);
        image.setAlignment(Element.ALIGN_JUSTIFIED);
        instruct.add(image);
      } catch (Exception ex) {
        ex.printStackTrace();
      }
    } else
    instruct.add(this.instructions);

    instruct.setAlignment(Element.ALIGN_CENTER);
    preface.add(instruct);
    addEmptyLine(preface, 2);
    document.add(preface);
    for (int i = 0; i < questionCol.size(); i++) {
      addContent(sname.get(i), questionCol.get(i), marksCol.get(i), imageCol.get(i), document);
      // addKey(sname.get(i),keyCol.get(i),document); 
    }
    document.newPage();
  }

  private void addKeyPage(Document document) throws DocumentException {
    Paragraph preface = new Paragraph();
    addEmptyLine(preface, 1);
    // We add one empty line 
    Paragraph header = new Paragraph(this.creator + "\n" + this.paperType + "\n" + queP.code + ":" + this.title, smallBold);
    header.setAlignment(Element.ALIGN_CENTER);
    preface.add(header);
    // Lets write a big header 
    addEmptyLine(preface, 1);
    Paragraph leftheader = new Paragraph("Time:" + this.time + "                                                                                                          " + "Maximum Marks:" + this.maxmarks, smallBold);
    leftheader.setAlignment(Element.ALIGN_LEFT);
    preface.add(leftheader);
    addEmptyLine(preface, 3);
    Paragraph key = new Paragraph("KEY\n", smallFont);
    key.setAlignment(Element.ALIGN_CENTER);
    preface.add(key);
    addEmptyLine(preface, 2);
    document.add(preface);
    for (int i = 0; i < questionCol.size(); i++) {
      addKey(sname.get(i), questionCol.get(i), marksCol.get(i), document);
    }
    document.newPage();
  }

  private void addContent(String s, ArrayList<String> q, ArrayList<Integer> m, ArrayList<String> im, Document d) throws DocumentException {
    Paragraph section = new Paragraph();
    pmarks = m.get(0);
    nmarks = m.get(1);
    String nmark = "";
    if (nmarks != 0) {
      nmark += " [" + nmarks + "] for wrong answers";
    }
    Paragraph sectionHeader = new Paragraph("Section " + s + " : (" + pmarks + " x " + q.size() + " = " + q.size() * pmarks + nmark + ")", smallBold);
    sectionHeader.setAlignment(Element.ALIGN_CENTER);
    section.add(sectionHeader);
    for (int i = 1; i <= q.size(); i++) {
      Paragraph temp = new Paragraph();
      String content = q.get(i - 1);
      String imageUrl = im.get(i - 1);
      System.out.println(imageUrl);
      if (imageUrl != "") {
        try {
          content += "\n\n";
          temp.add(content);
          Image image = Image.getInstance(new URL(imageUrl));
          image.scaleToFit(200, 400);
          image.setAlignment(Element.ALIGN_JUSTIFIED);
          temp.add(image);
        } catch (Exception ex) {
          ex.printStackTrace();
        }
      } else
      temp.add(content);
      temp.setAlignment(Element.ALIGN_LEFT);
      section.add(temp);
    }

    d.add(section);
  }

  private void addKey(String s, ArrayList<String> q, ArrayList<Integer> m, Document d) throws DocumentException {
    Paragraph section = new Paragraph();
    pmarks = m.get(0);
    nmarks = m.get(1);
    String nmark = "";
    if (nmarks != 0) {
      nmark += " [" + nmarks + "] for wrong answers";
    }
    Paragraph sectionHeader = new Paragraph("Section " + s + " : (" + pmarks + " x " + q.size() + " = " + q.size() * pmarks + nmark + ")", smallBold);
    sectionHeader.setAlignment(Element.ALIGN_CENTER);
    section.add(sectionHeader);
    for (int i = 1; i <= q.size(); i++) {
      Paragraph temp = new Paragraph(q.get(i - 1));
      temp.setAlignment(Element.ALIGN_LEFT);
      section.add(temp);
    }
    d.add(section);
  }

  /*package*/ void report(String[] title, Object[][] table) {
    try {
      Document document = new Document();
      FILER = FILER + ".pdf";
      PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(FILER));
      qpaper.HeaderFooter event = new qpaper.HeaderFooter(this.queP.code);
      writer.setBoxSize("art", new Rectangle(36, 54, 559, 788));
      writer.setStrictImageSequence(true);

      writer.setPageEvent(event);
      document.setPageSize(PageSize.A4);
      document.setMargins(36, 36, 36, 72);
      document.setMarginMirroringTopBottom(true);

      document.open();
      this.addReportPage(document, title, table);
      document.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  private static void addEmptyLine(Paragraph paragraph, int number) {
    for (int i = 0; i < number; i++) {
      paragraph.add(new Paragraph(" "));
    }



  }



  private void addReportPage(Document document, String[] title, Object[][] tableObjects) throws DocumentException {
    int i;
    int j;
    Paragraph preface = new Paragraph();
    addEmptyLine(preface, 1);
    // We add one empty line 
    Paragraph header = new Paragraph("REPORT", smallBold);
    header.setAlignment(Element.ALIGN_CENTER);
    preface.add(header);
    // Lets write a big header 
    addEmptyLine(preface, 1);
    PdfPTable table = new PdfPTable(title.length);
    PdfPCell c1;
    // converted:  for ( expr; ...) {}  ->  { expr; for ( ; ...) {} } 
    i = 0;
    for (; i < title.length; i++) {
      c1 = new PdfPCell(new Phrase(title[i].toUpperCase()));
      c1.setHorizontalAlignment(Element.ALIGN_CENTER);
      table.addCell(c1);
    }
    table.setHeaderRows(1);
    // converted:  for ( expr; ...) {}  ->  { expr; for ( ; ...) {} } 
    i = 0;
    for (; i < tableObjects.length; i++) {
      // converted:  for ( expr; ...) {}  ->  { expr; for ( ; ...) {} } 
      j = 0;
      for (; j < tableObjects[i].length; j++) {
        table.addCell(tableObjects[i][j].toString());
      }
    }
    preface.add(table);
    document.add(preface);
    document.newPage();
  }


}
