package Library.newlib;

/*Generated by MPS */

import javax.swing.JScrollPane;
import javax.swing.JPanel;
import java.util.ArrayList;
import javax.swing.JTextPane;
import java.util.Map;
import javax.swing.text.StyleContext;
import javax.swing.text.Style;
import javax.swing.BoxLayout;
import java.util.HashMap;
import javax.swing.text.StyleConstants;
import java.awt.Color;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import java.util.Collections;
import javax.swing.JOptionPane;
import javax.swing.text.StyledDocument;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.JFrame;
import java.awt.Dimension;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.Calendar;
import java.util.TimeZone;

public class QuestionPaper {

  /**
   * This class belongs to the business layer. All the functions associated with preparing and generating question paper
   * is associated with the functionality provided by this class.
   */
  public String code;
  public int postiveMarks;
  public int negativeMarks;
  private final String PATH = manifest.getQBPath();
  public XmlMediator xmlTool;
  public JScrollPane jscrollpaneQP;
  public JScrollPane jscrollpaneKey;
  public JPanel jrootpaneQp;
  public JPanel jrootpaneKey;
  public ArrayList<JTextPane> qpPanel;
  public ArrayList<JTextPane> keyPanel;
  public ArrayList<String> question;
  public ArrayList<String> key;
  public ArrayList<String> image;
  public int count;
  public ArrayList<String> sectionName;
  public ArrayList<Integer> marks;
  public ArrayList<ArrayList<String>> questionCollection;
  public ArrayList<ArrayList<String>> keyCollection;
  public ArrayList<ArrayList<Integer>> marksCollection;
  public ArrayList<ArrayList<String>> imageColllection;
  public Map qPaper;
  public StyleContext styleName;
  public Style titleStyle;
  public Style headingStyle;
  public Style bodyStyle;



  public QuestionPaper(String code) {
    this.code = code;
    question = new ArrayList<String>();
    key = new ArrayList<String>();
    image = new ArrayList<String>();
    jrootpaneQp = new JPanel();
    jrootpaneQp.setLayout(new BoxLayout(jrootpaneQp, BoxLayout.Y_AXIS));
    jscrollpaneQP = new JScrollPane(jrootpaneQp);
    jrootpaneKey = new JPanel();
    jrootpaneKey.setLayout(new BoxLayout(jrootpaneKey, BoxLayout.Y_AXIS));
    jscrollpaneKey = new JScrollPane(jrootpaneKey);
    qpPanel = new ArrayList<JTextPane>();
    keyPanel = new ArrayList<JTextPane>();
    styleName = new StyleContext();
    bodyStyle = styleName.addStyle("body", null);
    xmlTool = new XmlMediator(PATH);
    sectionName = new ArrayList<String>();
    marks = new ArrayList<Integer>();
    marksCollection = new ArrayList<ArrayList<Integer>>();
    questionCollection = new ArrayList<ArrayList<String>>();
    imageColllection = new ArrayList<ArrayList<String>>();

    keyCollection = new ArrayList<ArrayList<String>>();
    qPaper = new HashMap<String, ArrayList<String>>();


    StyleConstants.setFontFamily(bodyStyle, "Times New Roman");
    StyleConstants.setFontSize(bodyStyle, 16);
    StyleConstants.setLeftIndent(bodyStyle, 0);
    StyleConstants.setRightIndent(bodyStyle, 0);
    StyleConstants.setAlignment(bodyStyle, StyleConstants.ALIGN_LEFT);

    headingStyle = styleName.addStyle("heading", null);
    StyleConstants.setLeftIndent(headingStyle, 0);
    StyleConstants.setRightIndent(headingStyle, 0);
    StyleConstants.setForeground(headingStyle, Color.BLACK);
    StyleConstants.setFontSize(headingStyle, 18);
    StyleConstants.setFontFamily(headingStyle, "Times New Roman");
    StyleConstants.setBold(headingStyle, true);

    titleStyle = styleName.addStyle("title", null);
    StyleConstants.setLeftIndent(titleStyle, 0);
    StyleConstants.setRightIndent(titleStyle, 0);
    StyleConstants.setFontSize(titleStyle, 28);
    StyleConstants.setBackground(titleStyle, Color.WHITE);
    StyleConstants.setForeground(titleStyle, Color.BLACK);
    StyleConstants.setAlignment(titleStyle, StyleConstants.ALIGN_CENTER);
    StyleConstants.setFontFamily(titleStyle, "Times New Roman");
    StyleConstants.setBold(titleStyle, true);

    count = 1;
    postiveMarks = 1;
    negativeMarks = 0;

  }



  public void getmarks(int p, int n) {
    if (p == 0) {
      p = 1;
    }

    postiveMarks = p;
    negativeMarks = n * -1;

  }



  public void prepare(String typ, String sub, String diff, String numb, boolean a) throws Exception {
    int i = 0;
    int j;
    int num = Integer.parseInt(numb);
    NodeList temp;
    Element tempN;
    ArrayList<String> choice1 = new ArrayList<String>();
    ArrayList<String> question1 = new ArrayList<String>();
    ArrayList<String> image1 = new ArrayList<String>();

    ArrayList<String> key1 = new ArrayList<String>();
    ArrayList<Integer> flag = new ArrayList<Integer>();
    temp = xmlTool.search(sub, typ, diff, numb);

    i = 0;
    for (; i < temp.getLength(); i++) {
      flag.add(i);
    }

    Collections.shuffle(flag);

    if (num > temp.getLength()) {
      JOptionPane.showMessageDialog(null, "Only " + temp.getLength() + " questions exist!!!");
    }
    i = 0;
    for (; i < num; i++) {
      tempN = (Element) temp.item(flag.get(i));
      j = count;
      key1.add(j + ". " + tempN.getElementsByTagName("answer").item(0).getTextContent());
      String questionString = tempN.getElementsByTagName("statement").item(0).getTextContent() + "\n";
      if (typ.equalsIgnoreCase("MultipleChoiceAnswer")) {
        Element choices = (Element) tempN.getElementsByTagName("choices").item(0);
        String ques_choice;
        ques_choice = choices.getElementsByTagName("optional").item(0).getTextContent();

        int choice = Integer.parseInt(choices.getElementsByTagName("size").item(0).getTextContent());
        if (a == true || ques_choice.equalsIgnoreCase("false")) {

          for (int iter = 2; iter <= choice + 1; iter++) {
            choice1.add(tempN.getElementsByTagName("choices").item(0).getChildNodes().item(iter).getTextContent());
          }
          Collections.shuffle(choice1);

          for (int iter = 0; iter < choice1.size(); iter++) {
            questionString = questionString + "(" + (iter + 1) + ") " + choice1.get(iter) + "            ";
          }
          choice1.clear();
        }
      }
      question1.add(j + ". " + questionString);
      if (tempN.getElementsByTagName("image").getLength() == 1) {
        System.out.println(tempN.getElementsByTagName("image").item(0).getTextContent());
        image1.add(tempN.getElementsByTagName("image").item(0).getTextContent());
      } else
      image1.add("");

      count++;
    }

    //  if(temp.getLength()>1) Collections.shuffle(temp); 
    //  int i; 
    //  int num=Integer.parseInt(numb); 
    //  
    //  if(num>temp.size()){ 
    //      JOptionPane.showMessageDialog(null, "Only "+temp.size()+" questions exist!!!"); 
    //  } 
    //  else{ 
    //      for(i=0;i<num;i++){ 
    //          res.add(temp.get(i)); 
    //      } 
    //  } 
    createSectionBlock(question1, key1, image1);
  }




  public void createKey(String sectionName) {
    JTextPane p = new JTextPane();
    StyledDocument doc = p.getStyledDocument();
    p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));
    p.setEditable(false);
    p.setParagraphAttributes(headingStyle, true);
    try {
      doc.insertString(doc.getLength(), "Section " + sectionName + "\n", headingStyle);
    } catch (BadLocationException e) {
    }
    p.setParagraphAttributes(bodyStyle, true);

    for (int i = 0; i < key.size(); i++) {
      try {
        doc.insertString(doc.getLength(), key.get(i).toString() + "\n", bodyStyle);
      } catch (BadLocationException e) {
      }
    }
    jrootpaneKey.add(p);
    keyPanel.add(p);
    key = new ArrayList<String>();

  }



  public void pushSection(String sectionName) {
    marks.add(postiveMarks);
    marks.add(negativeMarks);
    marksCollection.add(marks);
    marks = new ArrayList<Integer>();
    preparePaper(sectionName);
    createSection(sectionName);
    createKey(sectionName);
    count = 1;
  }



  public void createSectionBlock(ArrayList<String> q, ArrayList<String> k, ArrayList<String> im) {
    int i;
    i = 0;
    for (; i < q.size(); i++) {
      question.add(q.get(i));
    }
    i = 0;
    for (; i < im.size(); i++) {
      image.add(im.get(i));
    }

    i = 0;
    for (; i < q.size(); i++) {
      key.add(k.get(i));
    }

  }



  public void createSection(String sectionName) {
    JTextPane p = new JTextPane();
    StyledDocument doc = p.getStyledDocument();
    SimpleAttributeSet rightAlign = new SimpleAttributeSet();

    StyleConstants.setAlignment(rightAlign, StyleConstants.ALIGN_RIGHT);
    StyleConstants.setForeground(rightAlign, Color.BLACK);
    StyleConstants.setFontSize(rightAlign, 12);
    p.setParagraphAttributes(headingStyle, true);
    try {
      doc.insertString(doc.getLength(), "Section " + sectionName + "\n", headingStyle);
    } catch (BadLocationException e) {
    }

    String rightn = "No negative Marks\n";
    p.setParagraphAttributes(rightAlign, true);
    String rightp = "Max Marks :" + postiveMarks + " x " + question.size() + " = " + postiveMarks * question.size() + "\n";
    if (negativeMarks != 0) {
      rightn = "Negative Marks:  " + negativeMarks + "\n";
    }

    try {
      doc.insertString(doc.getLength(), rightp, rightAlign);
      doc.insertString(doc.getLength(), rightn, rightAlign);

    } catch (BadLocationException e) {
    }
    p.setParagraphAttributes(bodyStyle, true);

    p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));
    for (int i = 0; i < question.size(); i++) {
      try {
        doc.insertString(doc.getLength(), question.get(i).toString() + "\n", bodyStyle);
      } catch (BadLocationException e) {
      }
    }
    jrootpaneQp.add(p);

    question = new ArrayList<String>();
    image = new ArrayList<String>();
    System.out.println(question.size());
  }



  public void showPaper(String title) {
    JFrame frame = new JFrame();
    frame.setLayout(new BoxLayout(frame.getContentPane(), BoxLayout.Y_AXIS));
    JTextPane pq = new JTextPane();
    StyledDocument docq = pq.getStyledDocument();
    frame.setBackground(Color.CYAN);
    pq.setEditable(false);
    pq.setParagraphAttributes(titleStyle, true);
    try {
      docq.insertString(docq.getLength(), "QUESTION PAPER \n CODE " + title.toUpperCase() + "\n", titleStyle);
    } catch (BadLocationException e) {
    }
    frame.add(pq);
    jscrollpaneQP.setPreferredSize(new Dimension(500, 500));
    jscrollpaneQP.setAutoscrolls(true);
    frame.add(jscrollpaneQP);
    JButton button1 = new JButton();
    button1.setText("Save as Pdf");
    button1.setToolTipText("Saves both Question Paper and answer Key");
    button1.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        generatePaper();
        JOptionPane.showMessageDialog(null, "Question Paper Generation Complete");
      }
    });
    frame.add(button1);
    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    frame.setTitle(title);
    frame.pack();
    frame.setMaximumSize(new Dimension(500, 500));
    frame.setVisible(true);
    JFrame kframe = new JFrame();
    kframe.setLayout(new BoxLayout(kframe.getContentPane(), BoxLayout.Y_AXIS));

    JTextPane p = new JTextPane();

    StyledDocument doc = p.getStyledDocument();
    p.setEditable(false);
    p.setParagraphAttributes(titleStyle, true);
    try {
      doc.insertString(doc.getLength(), "ANSWER KEY " + "\n", titleStyle);
      doc.insertString(doc.getLength(), " CODE " + title.toUpperCase() + "\n", titleStyle);
    } catch (BadLocationException e) {
    }

    kframe.add(p);
    jscrollpaneKey.setPreferredSize(new Dimension(500, 500));

    kframe.add(jscrollpaneKey);
    kframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    kframe.setTitle(title + ": KEY");
    kframe.setPreferredSize(new Dimension(500, 500));

    kframe.pack();
    kframe.setVisible(true);

  }

  public void preparePaper(String sName) {
    sectionName.add(sName);
    questionCollection.add(question);
    imageColllection.add(image);
    keyCollection.add(key);
  }

  public void generatePaper() {
    String[] monthName = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
    Calendar localCalendar = Calendar.getInstance(TimeZone.getDefault());
    qpManifest qpm = new qpManifest();



    qpaper q = new qpaper(qpm.getString("title"), qpm.getString("subject"), qpm.getString("keywords"), qpm.getString("author"), qpm.getString("creator"), qpm.getString("examtype") + monthName[localCalendar.get(Calendar.MONTH)] + ", " + localCalendar.get(Calendar.YEAR), code.toUpperCase(), qpm.getString("time"), qpm.getString("maxmarks"), qpm.getString("instructions"));
    q.setmarks(postiveMarks, negativeMarks);
    q.questionPaper(sectionName, questionCollection, marksCollection, imageColllection);
    q.keyPaper(sectionName, keyCollection, marksCollection);
  }




}
