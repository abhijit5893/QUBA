package dsl.Learnings.one.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b, conceptFqName)) {
      case 0:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.AbstractCommand_intf").interface_().create();
      case 1:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.AbstractSectionCommands_intf").interface_().create();
      case 2:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.AbstractSetQPCommands_intf").interface_().create();
      case 3:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.AbstractTypeCommands_intf").interface_().create();
      case 4:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.Begin").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.execution.util.structure.IMainClass").children(new String[]{"body"}, new boolean[]{false}).alias("Initializing QUBA", "").create();
      case 5:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.CommandList").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"commands"}, new boolean[]{true}).create();
      case 6:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.CommentLine").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "dsl.Learnings.one.structure.AbstractCommand_intf").properties("text").alias("#", "").create();
      case 7:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.CommentLineSection").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "dsl.Learnings.one.structure.AbstractSectionCommands_intf").properties("text").alias("#", "").create();
      case 8:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.CommentLineSetQP").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "dsl.Learnings.one.structure.AbstractSetQPCommands_intf").properties("text").alias("#", "").create();
      case 9:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.CommentLineType").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "dsl.Learnings.one.structure.AbstractTypeCommands_intf").properties("text").alias("#", "").create();
      case 10:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.Difficulty").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("difficulty", "count").create();
      case 11:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.EmptyLine").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "dsl.Learnings.one.structure.AbstractCommand_intf").create();
      case 12:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.EmptyLineSETQP").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "dsl.Learnings.one.structure.AbstractSetQPCommands_intf").create();
      case 13:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.EmptyLineSection").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "dsl.Learnings.one.structure.AbstractSectionCommands_intf").create();
      case 14:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.EmptyLineType").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "dsl.Learnings.one.structure.AbstractTypeCommands_intf").create();
      case 15:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.Mark").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("positive_mark", "negative_mark").alias("Mark", "").create();
      case 16:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.QTYPE").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "dsl.Learnings.one.structure.AbstractSectionCommands_intf").properties("name", "choices").children(new String[]{"body"}, new boolean[]{false}).alias("question type", "").create();
      case 17:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.RepeatQuestionPaper").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "dsl.Learnings.one.structure.AbstractCommand_intf").children(new String[]{"list", "body"}, new boolean[]{true, true}).alias("loop create question paper", "").create();
      case 18:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.RepeatSubject").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "dsl.Learnings.one.structure.AbstractTypeCommands_intf").children(new String[]{"list", "body"}, new boolean[]{true, true}).alias("loop subject with", "").create();
      case 19:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.RepeatType").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "dsl.Learnings.one.structure.AbstractSectionCommands_intf").children(new String[]{"list", "body"}, new boolean[]{true, true}).alias("loop question type ", "").create();
      case 20:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.Section").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "dsl.Learnings.one.structure.AbstractSetQPCommands_intf").children(new String[]{"body", "mark"}, new boolean[]{false, false}).alias("create section", "").create();
      case 21:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.SectionBlock").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"commands_body"}, new boolean[]{true}).create();
      case 22:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.SetQP").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "dsl.Learnings.one.structure.AbstractCommand_intf").children(new String[]{"body"}, new boolean[]{false}).alias("create question paper", "").create();
      case 23:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.SetQPBlock").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"commands_body"}, new boolean[]{true}).create();
      case 24:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.StringName").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("StringLiteral").create();
      case 25:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.Subject").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "dsl.Learnings.one.structure.AbstractTypeCommands_intf").children(new String[]{"Field"}, new boolean[]{true}).alias("subject", "").create();
      case 26:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.SubjectList").super_("jetbrains.mps.baseLanguage.structure.StringLiteral").parents("jetbrains.mps.baseLanguage.structure.StringLiteral").create();
      case 27:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.System_Specifics").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("questionBank_Path", "questionPaper_Path", "questionKey_Path").create();
      case 28:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.TYPEBlock").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"commands_body"}, new boolean[]{true}).create();
      case 29:
        return new ConceptDescriptorBuilder("dsl.Learnings.one.structure.TypeList").super_("jetbrains.mps.baseLanguage.structure.StringLiteral").parents("jetbrains.mps.baseLanguage.structure.StringLiteral").create();
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }

  private static String[] stringSwitchCases_1htk8d_a0a0b = new String[]{"dsl.Learnings.one.structure.AbstractCommand_intf", "dsl.Learnings.one.structure.AbstractSectionCommands_intf", "dsl.Learnings.one.structure.AbstractSetQPCommands_intf", "dsl.Learnings.one.structure.AbstractTypeCommands_intf", "dsl.Learnings.one.structure.Begin", "dsl.Learnings.one.structure.CommandList", "dsl.Learnings.one.structure.CommentLine", "dsl.Learnings.one.structure.CommentLineSection", "dsl.Learnings.one.structure.CommentLineSetQP", "dsl.Learnings.one.structure.CommentLineType", "dsl.Learnings.one.structure.Difficulty", "dsl.Learnings.one.structure.EmptyLine", "dsl.Learnings.one.structure.EmptyLineSETQP", "dsl.Learnings.one.structure.EmptyLineSection", "dsl.Learnings.one.structure.EmptyLineType", "dsl.Learnings.one.structure.Mark", "dsl.Learnings.one.structure.QTYPE", "dsl.Learnings.one.structure.RepeatQuestionPaper", "dsl.Learnings.one.structure.RepeatSubject", "dsl.Learnings.one.structure.RepeatType", "dsl.Learnings.one.structure.Section", "dsl.Learnings.one.structure.SectionBlock", "dsl.Learnings.one.structure.SetQP", "dsl.Learnings.one.structure.SetQPBlock", "dsl.Learnings.one.structure.StringName", "dsl.Learnings.one.structure.Subject", "dsl.Learnings.one.structure.SubjectList", "dsl.Learnings.one.structure.System_Specifics", "dsl.Learnings.one.structure.TYPEBlock", "dsl.Learnings.one.structure.TypeList"};
}
