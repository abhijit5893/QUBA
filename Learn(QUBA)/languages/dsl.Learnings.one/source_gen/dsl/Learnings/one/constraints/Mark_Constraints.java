package dsl.Learnings.one.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class Mark_Constraints extends BaseConstraintsDescriptor {
  public Mark_Constraints() {
    super("dsl.Learnings.one.structure.Mark");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("positive_mark", new BasePropertyConstraintsDescriptor("positive_mark", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node, IScope scope) {
        String propertyName = "positive_mark";
        return SPropertyOperations.getInteger(node, "positive_mark");
      }

      @Override
      public boolean hasOwnValidator() {
        return true;
      }

      @Override
      public boolean validateValue(SNode node, String propertyValue, IScope scope) {
        String propertyName = "positive_mark";
        return ((SPropertyOperations.getInteger(propertyValue)) >= 1 ? true : false);
      }
    });
    properties.put("negative_mark", new BasePropertyConstraintsDescriptor("negative_mark", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node, IScope scope) {
        String propertyName = "negative_mark";
        return SPropertyOperations.getInteger(node, "negative_mark");
      }

      @Override
      public boolean hasOwnValidator() {
        return true;
      }

      @Override
      public boolean validateValue(SNode node, String propertyValue, IScope scope) {
        String propertyName = "negative_mark";
        return ((SPropertyOperations.getInteger(propertyValue)) <= SPropertyOperations.getInteger(node, "positive_mark") && (SPropertyOperations.getInteger(propertyValue)) > -1 ? true : false);
      }
    });
    return properties;
  }
}
