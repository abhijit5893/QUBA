package dsl.Learnings.one.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.cellMenu.CompositeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteInfoPartExt;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.editor.generator.internal.AbstractCellMenuPart_PropertyValues;
import java.util.List;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import dsl.Learnings.one.behavior.SubjectList_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class SubjectList_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createProperty_68k4i9_a(editorContext, node);
  }

  private EditorCell createProperty_68k4i9_a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("value");
    provider.setNoTargetText("<no value>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_value");
    editorCell.setBig(true);
    editorCell.setSubstituteInfo(new CompositeSubstituteInfo(editorContext, provider.getCellContext(), new SubstituteInfoPartExt[]{new SubjectList_Editor.SubjectList_value_cellMenu_68k4i9_a0a()}));
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  public static class SubjectList_value_cellMenu_68k4i9_a0a extends AbstractCellMenuPart_PropertyValues {
    public SubjectList_value_cellMenu_68k4i9_a0a() {
    }

    public List<String> getPropertyValues(SNode node, IScope scope, IOperationContext operationContext, EditorContext editorContext) {
      if (SNodeOperations.getAncestor(node, "dsl.Learnings.one.structure.QTYPE", false, false) != null) {
        return SubjectList_Behavior.call_getMenu_4272570878829838961(node, SPropertyOperations.getString(SNodeOperations.getAncestor(node, "dsl.Learnings.one.structure.QTYPE", false, false), "name"));
      }
      if (SNodeOperations.getAncestor(node, "dsl.Learnings.one.structure.RepeatType", false, false) != null) {
        List<String> temp = ListSequence.fromList(new LinkedList<String>());
        for (SNode i : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getAncestor(node, "dsl.Learnings.one.structure.RepeatType", false, false), "list", true))) {
          ListSequence.fromList(temp).addElement(SPropertyOperations.getString(i, "value"));
        }
        return SubjectList_Behavior.call_getMenu_7751232820941264588(node, temp);
      }
      return null;
    }
  }
}
