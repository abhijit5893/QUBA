package dsl.learnings.two.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;

public class MultipleChoiceAnswer_Constraints extends BaseConstraintsDescriptor {
  public MultipleChoiceAnswer_Constraints() {
    super("dsl.learnings.two.structure.MultipleChoiceAnswer");
  }

  @Override
  public boolean hasOwnCanBeParentMethod() {
    return true;
  }

  @Override
  public boolean canBeParent(SNode node, @Nullable SNode childNode, SNode childConcept, SNode link, IOperationContext operationContext, @Nullable CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAParent(node, childNode, childConcept, link, operationContext);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeParentBreakingPoint);
    }

    return result;
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("answerString", new BasePropertyConstraintsDescriptor("answerString", this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }

      @Override
      public boolean validateValue(SNode node, String propertyValue, IScope scope) {
        String propertyName = "answerString";
        for (int i = 0; i < ListSequence.fromList(SLinkOperations.getTargets(node, "choice_list", true)).count(); i++) {
          if ((SPropertyOperations.getString(propertyValue)).equalsIgnoreCase(SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(node, "choice_list", true)).getElement(i), "value"))) {
            return true;
          }
        }
        return false;
      }
    });
    return properties;
  }

  public static boolean static_canBeAParent(SNode node, SNode childNode, SNode childConcept, SNode link, final IOperationContext operationContext) {
    return (ListSequence.fromList(SLinkOperations.getTargets(node, "choice_list", true)).count() == SPropertyOperations.getInteger(node, "no_of_choices") ? true : false);
  }

  private static SNodePointer canBeParentBreakingPoint = new SNodePointer("r:2c8bbec7-31f3-49d0-b1f0-24557914bdf9(dsl.learnings.two.constraints)", "8604482642923140081");
}
