package dsl.learnings.two.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import Library.newlib.QuestionBank;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import java.io.File;

public class Update_Behavior {
  public static void init(SNode thisNode) {
  }

  public static List<String> call_getQuestionNumberMenu_2334151094744355094(SNode thisNode) {
    QuestionBank qb = new QuestionBank();
    List<String> resList = ListSequence.fromList(new LinkedList<String>());
    try {
      String[] result = qb.searchByMenu("id");
      for (int i = 0; i < result.length; i++) {
        ListSequence.fromList(resList).addElement(result[i]);
      }
    } catch (Exception e) {
    }
    return resList;
  }

  public static List<String> call_getAttributeMenu_2334151094745361642(SNode thisNode) {
    List<String> options = ListSequence.fromList(new LinkedList<String>());
    ListSequence.fromList(options).addElement("subject");
    ListSequence.fromList(options).addElement("type");
    ListSequence.fromList(options).addElement("difficulty");
    ListSequence.fromList(options).addElement("statement");
    ListSequence.fromList(options).addElement("answer");
    ListSequence.fromList(options).addElement("image");
    return options;
  }

  public static List<String> call_getMenu_8604482642920424001(SNode thisNode, String context) {
    QuestionBank qb = new QuestionBank();
    List<String> resList = ListSequence.fromList(new LinkedList<String>());
    try {
      String[] result = qb.searchByMenu(context);
      for (int i = 0; i < result.length; i++) {
        ListSequence.fromList(resList).addElement(result[i]);
      }
    } catch (Exception e) {
    }
    return resList;
  }

  public static List<String> call_getValueMenu_8604482642920300460(SNode thisNode, String setValue) {
    if (setValue.equalsIgnoreCase("type")) {
      return Update_Behavior.call_getMenu_8604482642920424001(thisNode, "type");
    }
    if (setValue.equalsIgnoreCase("subject")) {
      return Update_Behavior.call_getMenu_8604482642920424001(thisNode, "subject");
    }
    if (setValue.equalsIgnoreCase("difficulty")) {
      List<String> difficulty = ListSequence.fromList(new LinkedList<String>());
      ListSequence.fromList(difficulty).addElement("1");
      ListSequence.fromList(difficulty).addElement("2");
      ListSequence.fromList(difficulty).addElement("3");
      ListSequence.fromList(difficulty).addElement("4");
      ListSequence.fromList(difficulty).addElement("5");
      ListSequence.fromList(difficulty).addElement("6");
      ListSequence.fromList(difficulty).addElement("7");
      ListSequence.fromList(difficulty).addElement("8");
      ListSequence.fromList(difficulty).addElement("9");
      ListSequence.fromList(difficulty).addElement("10");
      return difficulty;
    }
    if (setValue.equalsIgnoreCase("image")) {
      return Update_Behavior.call_pictures_3246054877526373057(thisNode, Update_Behavior.call_getbasepath_3246054877526373119(thisNode));
    }
    return null;
  }

  public static List<String> call_pictures_3246054877526373057(SNode thisNode, String folderString) {
    File folder = new File(folderString);
    List<String> RESULT = ListSequence.fromList(new LinkedList<String>());

    File[] listOfFiles = folder.listFiles();
    if (listOfFiles.length == 0) {
      ListSequence.fromList(RESULT).addElement("ZERO");
    }
    for (File file : listOfFiles) {
      if (file.isFile()) {
        ListSequence.fromList(RESULT).addElement("file:\\\\\\" + file.getPath());

      }
    }
    return RESULT;
  }

  public static String call_getbasepath_3246054877526373119(SNode thisNode) {
    String path = "C:\\Users\\" + System.getProperty("user.name") + "\\Pictures\\QUBA";
    File directory = new File(path);
    if (!(directory.exists())) {
      directory.mkdir();
    }

    return path;
  }
}
